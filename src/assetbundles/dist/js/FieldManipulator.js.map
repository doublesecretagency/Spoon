{"version":3,"file":"/dist/js/FieldManipulator.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,UAASA,CAAT,EAAW;EAGR,IAAI,OAAOC,KAAP,IAAgB,WAApB,EACA;IACIA,KAAK,GAAG,EAAR;EACH,CANO,CAQR;;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIA,KAAK,CAACC,gBAAN,GAAyBC,OAAO,CAACC,IAAR,CAAaC,MAAb,CACrB;IAEIC,2BAA2B,EAAE,IAFjC;IAGIC,iCAAiC,EAAE,IAHvC;IAKIC,IAAI,EAAE,cAASC,QAAT,EACN;MACI;MACA,KAAKC,WAAL,CAAiBD,QAAjB,EAA2BR,KAAK,CAACC,gBAAN,CAAuBS,QAAlD,EAFJ,CAII;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA,KAAKL,2BAAL,GAAmCN,CAAC,CAACY,KAAF,CAAQ,IAAR,EAAc,uBAAd,CAAnC;MACA,KAAKL,iCAAL,GAAyCP,CAAC,CAACY,KAAF,CAAQ,IAAR,EAAc,6BAAd,CAAzC;MAEAT,OAAO,CAACU,EAAR,CAAWC,KAAK,CAACC,WAAjB,EAA8B,WAA9B,EAA2C,KAAKT,2BAAhD;MACAH,OAAO,CAACU,EAAR,CAAWC,KAAK,CAACC,WAAjB,EAA8B,YAA9B,EAA4C,KAAKR,iCAAjD;;MAEA,IAAI,OAAOO,KAAK,CAACE,UAAb,KAA4B,WAAhC,EAA6C;QACzC,IAAI,OAAOF,KAAK,CAACE,UAAN,CAAiBC,KAAxB,KAAkC,WAAtC,EAAmD;UAC/Cd,OAAO,CAACU,EAAR,CAAWC,KAAK,CAACE,UAAN,CAAiBC,KAA5B,EAAmC,WAAnC,EAAgD,KAAKX,2BAArD;UACAH,OAAO,CAACU,EAAR,CAAWC,KAAK,CAACE,UAAN,CAAiBC,KAA5B,EAAmC,YAAnC,EAAiD,KAAKV,iCAAtD;QACH,CAHD,MAGO,IAAI,OAAOO,KAAK,CAACE,UAAN,CAAiBE,cAAxB,KAA2C,WAA/C,EAA4D;UAC/Df,OAAO,CAACU,EAAR,CAAWC,KAAK,CAACE,UAAN,CAAiBE,cAA5B,EAA4C,WAA5C,EAAyD,KAAKZ,2BAA9D;UACAH,OAAO,CAACU,EAAR,CAAWC,KAAK,CAACE,UAAN,CAAiBE,cAA5B,EAA4C,YAA5C,EAA0D,KAAKX,iCAA/D;QACH;MACJ,CA5BL,CA8BI;;;MACA,IAAI,KAAKE,QAAL,CAAcU,SAAlB,EAA6B;QACzBhB,OAAO,CAACiB,IAAR,CAAaC,IAAb,CAAkB,eAAlB,EAAmCC,IAAnC,CAAwCtB,CAAC,CAACY,KAAF,CAAQ,UAASW,GAAT,EAAcC,WAAd,EAChD;UACI,IAAIC,YAAY,GAAGzB,CAAC,CAACwB,WAAD,CAApB,CADJ,CAGI;;UACA,KAAKE,mBAAL,CAAyBD,YAAzB,EAJJ,CAMI;;UACAA,YAAY,CAACJ,IAAb,CAAkB,0BAAlB,EAA8CC,IAA9C,CAAmDtB,CAAC,CAACY,KAAF,CAAQ,UAASW,GAAT,EAAcI,WAAd,EAC3D;YACI,KAAKC,UAAL,CAAgB5B,CAAC,CAAC2B,WAAD,CAAjB,EAAgCF,YAAhC;UACH,CAHkD,EAGhD,IAHgD,CAAnD;QAKH,CAbuC,EAarC,IAbqC,CAAxC;MAcH;IACJ,CArDL;IAwDII,qBAAqB,EAAE,+BAASC,EAAT,EACvB;MACI,IAAIL,YAAY,GAAGK,EAAE,CAACC,MAAH,CAAUC,UAA7B;MAAA,IACIC,OAAO,GAAGH,EAAE,CAACC,MAAH,CAAUG,eAAV,CAA0BC,QAA1B,EADd;MAGA,KAAKT,mBAAL,CAAyBD,YAAzB;MAEAQ,OAAO,CAACX,IAAR,CAAatB,CAAC,CAACY,KAAF,CAAQ,UAASwB,GAAT,EAAaC,KAAb,EACrB;QACI,KAAKT,UAAL,CAAgB5B,CAAC,CAACqC,KAAD,CAAjB,EAA0BZ,YAA1B;MACH,CAHY,EAGV,IAHU,CAAb;IAIH,CAnEL;IAqEIa,2BAA2B,EAAE,qCAASR,EAAT,EAC7B;MACI,IAAIL,YAAY,GAAGK,EAAE,CAACC,MAAH,CAAUC,UAA7B;MAAA,IACIO,MAAM,GAAGvC,CAAC,CAAC8B,EAAE,CAACS,MAAJ,CADd;MAGA,KAAKX,UAAL,CAAgBW,MAAhB,EAAwBd,YAAxB;IACH,CA3EL;IA6EIC,mBAAmB,EAAE,6BAASD,YAAT,EACrB;MACI;MACA,IAAIA,YAAY,CAACe,IAAb,CAAkB,SAAlB,CAAJ,EAAkC;QAC9B;MACH,CAJL,CAMI;;;MACA,IAAIC,iBAAiB,GAAG,KAAKC,mBAAL,CAAyBjB,YAAzB,CAAxB,CAPJ,CASI;;;MACA,IAAIkB,iBAAiB,GAAG,EAAxB,CAVJ,CAYI;;MACA,IAAI,OAAO,KAAKlC,QAAL,CAAcmC,UAAd,CAAyB,KAAKnC,QAAL,CAAcoC,OAAvC,CAAP,KAA2D,WAA/D,EACA;QACIF,iBAAiB,GAAG3C,CAAC,CAAC8C,IAAF,CAAO,KAAKrC,QAAL,CAAcmC,UAAd,CAAyB,KAAKnC,QAAL,CAAcoC,OAAvC,CAAP,EAAwD,UAASE,CAAT,EAAW;UACnF,OAAOA,CAAC,CAACC,WAAF,KAAkBP,iBAAzB;QACH,CAFmB,CAApB;MAGH,CAlBL,CAoBI;;;MACA,IAAIE,iBAAiB,CAACM,MAAlB,GAA2B,CAA3B,IAAgC,OAAO,KAAKxC,QAAL,CAAcmC,UAAd,CAAyB,QAAzB,CAAP,KAA8C,WAAlF,EACA;QACID,iBAAiB,GAAG3C,CAAC,CAAC8C,IAAF,CAAO,KAAKrC,QAAL,CAAcmC,UAAd,CAAyB,QAAzB,CAAP,EAA2C,UAASG,CAAT,EAAW;UACtE,OAAOA,CAAC,CAACC,WAAF,KAAkBP,iBAAzB;QACH,CAFmB,CAApB;MAGH,CA1BL,CA4BI;;;MACA,IAAIE,iBAAiB,CAACM,MAAlB,GAA2B,CAA/B,EAAkC;QAC9B;MACH,CA/BL,CAiCI;;;MACAxB,YAAY,CAACe,IAAb,CAAkB,SAAlB,EAA6B,IAA7B,EAlCJ,CAoCI;;MACAf,YAAY,CAACe,IAAb,CAAkB,mBAAlB,EAAuCG,iBAAvC,EArCJ,CAuCI;;MACA,IAAI,KAAKlC,QAAL,CAAcU,SAAlB,EAA6B;QACzB;MACH,CA1CL,CA4CI;;;MACA,IAAI+B,YAAY,GAAGzB,YAAY,CAACJ,IAAb,CAAkB,YAAlB,EAAgC8B,KAAhC,EAAnB,CA7CJ,CA+CI;;MACAD,YAAY,CAACE,QAAb,CAAsB,QAAtB,EAhDJ,CAkDI;MACA;;MACA,IAAIC,wBAAwB,GAAGrD,CAAC,CAAC,iCAAD,CAAD,CAAqCsD,WAArC,CAAiDJ,YAAjD,CAA/B,CApDJ,CAsDI;;MACA,IAAIK,YAAY,GAAGvD,CAAC,CAAC,0BAAD,CAAD,CAA8BwD,QAA9B,CAAuCH,wBAAvC,CAAnB,CAvDJ,CAyDI;;MACA,IAAII,iBAAiB,GAAGzD,CAAC,CAAC,8CAA8Cc,KAAK,CAAC4C,CAAN,CAAQ,KAAR,EAAe,aAAf,CAA9C,GAA8E,QAA/E,CAAD,CAA0FF,QAA1F,CAAmGH,wBAAnG,CAAxB;MAAA,IACIM,cAAc,GAAG3D,CAAC,CAAC,2CAAD,CAAD,CAA+CwD,QAA/C,CAAwDH,wBAAxD,CADrB,CA1DJ,CA6DI;;MACA,KAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,iBAAiB,CAACM,MAAtC,EAA8CW,CAAC,EAA/C,EAAmD;QAE/C;QACA,IAAIL,YAAY,CAAClC,IAAb,CAAkB,0BAA0BsB,iBAAiB,CAACiB,CAAD,CAAjB,CAAqBC,SAA/C,GAA2D,IAA7E,EAAmFZ,MAAnF,KAA8F,CAAlG,EAAqG;UACjG;UACA,IAAIa,YAAY,GAAG9D,CAAC,CAAC,+BAA+Bc,KAAK,CAAC4C,CAAN,CAAQ,MAAR,EAAgBf,iBAAiB,CAACiB,CAAD,CAAjB,CAAqB,WAArB,CAAhB,CAA/B,GAAoF,QAArF,CAAD,CAAgGJ,QAAhG,CAAyGD,YAAzG,CAAnB;UAAA,IACIQ,SAAS,GAAG/D,CAAC,CAAC,2CAA2C2C,iBAAiB,CAACiB,CAAD,CAAjB,CAAqB,WAArB,CAA3C,GAA+E,MAAhF,CAAD,CAAyFJ,QAAzF,CAAkGD,YAAlG,CADhB;UAAA,IAEIS,OAAO,GAAGhE,CAAC,CAAC,QAAD,CAAD,CAAYwD,QAAZ,CAAqBO,SAArB,CAFd,CAFiG,CAMjG;;UACA,IAAIH,CAAC,KAAK,CAAV,EAAa;YACT5D,CAAC,CAAC,MAAD,CAAD,CAAUwD,QAAV,CAAmBG,cAAnB;UACH;;UACD3D,CAAC,CAAC,SAASc,KAAK,CAAC4C,CAAN,CAAQ,MAAR,EAAgBf,iBAAiB,CAACiB,CAAD,CAAjB,CAAqB,WAArB,CAAhB,CAAT,GAA8D,OAA/D,CAAD,CAAyEJ,QAAzE,CAAkFG,cAAlF;UACA,IAAIM,YAAY,GAAGjE,CAAC,CAAC,OAAD,CAAD,CAAWwD,QAAX,CAAoBG,cAApB,CAAnB;QACH,CAf8C,CAiB/C;;;QACAO,GAAG,GAAGlE,CAAC,CAAC,uBAAuB2C,iBAAiB,CAACiB,CAAD,CAAjB,CAAqBO,eAArB,CAAqCC,MAA5D,GAAqE,IAArE,GAA4EtD,KAAK,CAAC4C,CAAN,CAAQ,MAAR,EAAgBf,iBAAiB,CAACiB,CAAD,CAAjB,CAAqBO,eAArB,CAAqCE,IAArD,CAA5E,GAAyI,WAA1I,CAAP,CAlB+C,CAoB/C;;QACAH,GAAG,CAACV,QAAJ,CAAaQ,OAAb,EArB+C,CAuB/C;;QACAE,GAAG,CAACI,KAAJ,GAAYd,QAAZ,CAAqBS,YAArB;MAEH,CAxFL,CA0FI;;;MACAV,YAAY,CAAClC,IAAb,CAAkB,UAAlB,EAA8BC,IAA9B,CAAmC,YAAW;QAE1C,IAAInB,OAAO,CAACoE,OAAZ,CAAoBvE,CAAC,CAAC,IAAD,CAArB,EACI;UACIwE,cAAc,EAAE,wBAASC,MAAT,EAAiB;YAC7B;YACA,IAAIC,IAAI,GAAG1E,CAAC,CAACyE,MAAD,CAAD,CAAUjC,IAAV,CAAe,MAAf,CAAX;YACAU,YAAY,CAAC7B,IAAb,CAAkB,iBAAiBqD,IAAjB,GAAwB,IAA1C,EAAgDC,OAAhD,CAAwD,OAAxD;UACH;QALL,CADJ;MASH,CAXD;MAaA,IAAIxE,OAAO,CAACoE,OAAZ,CAAoBd,iBAApB,EACI;QACIe,cAAc,EAAE,wBAASC,MAAT,EAAiB;UAC7B;UACA,IAAIC,IAAI,GAAG1E,CAAC,CAACyE,MAAD,CAAD,CAAUjC,IAAV,CAAe,MAAf,CAAX;UACAU,YAAY,CAAC7B,IAAb,CAAkB,iBAAiBqD,IAAjB,GAAwB,IAA1C,EAAgDC,OAAhD,CAAwD,OAAxD;QACH;MALL,CADJ,EAxGJ,CAiHI;;MACA,KAAKC,WAAL,CAAiBnD,YAAjB,EAA+B,QAA/B,EAAyCzB,CAAC,CAACY,KAAF,CAAQ,YAAW;QACxD;QACA,IAAI,CAACa,YAAY,CAACe,IAAb,CAAkB,0BAAlB,CAAL,EAAoD;UAChDf,YAAY,CAACe,IAAb,CAAkB,0BAAlB,EAA8Ce,YAAY,CAACsB,KAAb,EAA9C;;UAEA,IAAI,CAACpD,YAAY,CAACe,IAAb,CAAkB,0BAAlB,CAAL,EAAoD;YAChD;UACH;QACJ,CARuD,CAUxD;;;QACA,IAAIsC,UAAU,GAAGrD,YAAY,CAACoD,KAAb,EAAjB;QAAA,IACIE,gBAAgB,GAAGtD,YAAY,CAACe,IAAb,CAAkB,0BAAlB,CADvB;;QAEA,IAAIsC,UAAU,GAAGC,gBAAjB,EAAmC;UAC/BtB,iBAAiB,CAACuB,WAAlB,CAA8B,QAA9B;UACAzB,YAAY,CAACH,QAAb,CAAsB,QAAtB;QACH,CAHD,MAGO;UACHK,iBAAiB,CAACL,QAAlB,CAA2B,QAA3B;UACAG,YAAY,CAACyB,WAAb,CAAyB,QAAzB;QACH;MAEJ,CArBwC,EAqBtC,IArBsC,CAAzC;IAsBH,CAtNL;IAwNIpD,UAAU,EAAE,oBAASqD,YAAT,EAAuBxD,YAAvB,EACZ;MAEI,IAAK,CAACwD,YAAY,CAACzC,IAAb,CAAkB,SAAlB,CAAN,EACA;QAEI;QACAyC,YAAY,CAACzC,IAAb,CAAkB,SAAlB,EAA6B,IAA7B,EAHJ,CAKI;;QACA,IAAIG,iBAAiB,GAAGlB,YAAY,CAACe,IAAb,CAAkB,mBAAlB,CAAxB,CANJ,CAQI;;QACA,IAAK,OAAOG,iBAAP,KAA6B,WAA7B,IAA4CA,iBAAiB,CAACM,MAAlB,IAA4B,CAA7E,EACA;UAEI;UACA,IAAI,CAAC,KAAKxC,QAAL,CAAcU,SAAnB,EAA8B;YAC1B,IAAI+D,YAAY,GAAGD,YAAY,CAAC5D,IAAb,CAAkB,4BAAlB,CAAnB;YACA,KAAK8D,gBAAL,CAAsBD,YAAtB,EAAoCvC,iBAApC,EAAuDlB,YAAvD;UACH,CANL,CAQI;;;UACA,IAAI2D,qBAAqB,GAAG,KAAKC,yBAAL,CAA+BJ,YAA/B,CAA5B,CATJ,CAWI;;;UACA,IAAIK,gBAAgB,GAAGtF,CAAC,CAAC8C,IAAF,CAAOH,iBAAP,EAA0B,UAASI,CAAT,EAAW;YAAE,OAAOA,CAAC,CAACoB,eAAF,CAAkBC,MAAlB,KAA6BgB,qBAApC;UAA4D,CAAnG,CAAvB,CAZJ,CAcI;;UACA,IAAKE,gBAAgB,CAACrC,MAAjB,KAA4B,CAA5B,IAAiCqC,gBAAgB,CAAC,CAAD,CAAhB,CAAoBC,aAApB,KAAsC,IAA5E,EACA;YACIN,YAAY,CAACzC,IAAb,CAAkB,oBAAlB,EAAwC8C,gBAAgB,CAAC,CAAD,CAAxD;YACA,KAAKE,oBAAL,CAA0BP,YAA1B,EAAwCxD,YAAxC;UACH,CAJD,CAKA;UALA,KAMK,IAAI,KAAKhB,QAAL,CAAcmC,UAAd,CAAyB6C,cAAzB,CAAwC,QAAxC,CAAJ,EACL;YACI,IAAIhD,iBAAiB,GAAG,KAAKC,mBAAL,CAAyBjB,YAAzB,CAAxB;;YACAkB,iBAAiB,GAAG3C,CAAC,CAAC8C,IAAF,CAAO,KAAKrC,QAAL,CAAcmC,UAAd,CAAyB,QAAzB,CAAP,EAA2C,UAASG,CAAT,EAAW;cAAE,OAAOA,CAAC,CAACC,WAAF,KAAkBP,iBAAzB;YAA6C,CAArG,CAApB;;YAEA,IAAKE,iBAAiB,CAACM,MAAlB,IAA4B,CAAjC,EACA;cACIqC,gBAAgB,GAAGtF,CAAC,CAAC8C,IAAF,CAAOH,iBAAP,EAA0B,UAASI,CAAT,EAAW;gBAAE,OAAOA,CAAC,CAACoB,eAAF,CAAkBC,MAAlB,KAA6BgB,qBAApC;cAA4D,CAAnG,CAAnB;;cAEA,IAAKE,gBAAgB,CAACrC,MAAjB,KAA4B,CAA5B,IAAiCqC,gBAAgB,CAAC,CAAD,CAAhB,CAAoBC,aAApB,KAAsC,IAA5E,EACA;gBACIN,YAAY,CAACzC,IAAb,CAAkB,oBAAlB,EAAwC8C,gBAAgB,CAAC,CAAD,CAAxD;gBACA,KAAKE,oBAAL,CAA0BP,YAA1B,EAAwCxD,YAAxC;cACH,CAJD,MAMA;gBACIwD,YAAY,CAAC7B,QAAb,CAAsB,yBAAtB;cACH;YACJ,CAbD,MAeA;cACI6B,YAAY,CAAC7B,QAAb,CAAsB,yBAAtB;YACH;UACJ,CAvBI,MAyBL;YACI6B,YAAY,CAAC7B,QAAb,CAAsB,yBAAtB;UACH;QAEJ,CAnDD,MAqDA;UACI6B,YAAY,CAAC7B,QAAb,CAAsB,yBAAtB;QACH;MAEJ,CAnED,MAqEA;QACI;QACAjD,OAAO,CAACiB,IAAR,CAAauD,OAAb,CAAqB,QAArB;MACH;IAEJ,CArSL;IAuSIa,oBAAoB,EAAE,8BAASP,YAAT,EAAuBxD,YAAvB,EACtB;MAEI,IAAI6D,gBAAgB,GAAGL,YAAY,CAACzC,IAAb,CAAkB,oBAAlB,CAAvB;MAAA,IACIkD,IAAI,GAAGJ,gBAAgB,CAACK,gBAAjB,CAAkCD,IAD7C;MAAA,IAEIE,MAAM,GAAGN,gBAAgB,CAACK,gBAAjB,CAAkCC,MAF/C,CAFJ,CAMI;MACA;;MACA,IAAKF,IAAI,CAACzC,MAAL,IAAe,CAApB,EACA;QACI;QACAgC,YAAY,CAAC7B,QAAb,CAAsB,qBAAtB;;QAEA,IAAI,KAAK3C,QAAL,CAAcU,SAAlB,EAA6B;UACzB8D,YAAY,CAAC7B,QAAb,CAAsB,+BAAtB;QACH,CANL,CAQI;;;QACA,IAAIyC,SAAS,GAAGpE,YAAY,CAACqE,IAAb,CAAkB,IAAlB,IAA0B,UAA1B,GAAuCb,YAAY,CAACzC,IAAb,CAAkB,IAAlB,CAAvD;QAAA,IACIuD,gBAAgB,GAAG,WAAWF,SADlC,CATJ,CAYI;;QACA,IAAIG,KAAK,GAAGhG,CAAC,CAAC,0BAAD,CAAD,CAA8BwD,QAA9B,CAAuCyB,YAAvC,CAAZ,CAbJ,CAeI;;QACA,IAAIgB,cAAc,GAAGjG,CAAC,CAAC,6BAAD,CAAD,CAAiCkG,GAAjC,CAAqC;UAAE,WAAY;QAAd,CAArC,EAAwD1C,QAAxD,CAAiEyB,YAAjE,CAArB;QAAA,IACIkB,OAAO,GAAGlB,YAAY,CAAC5D,IAAb,CAAkB,WAAlB,CADd;QAEA8E,OAAO,CAACD,GAAR,CAAY;UAAE,WAAY;QAAd,CAAZ;QACAD,cAAc,CAAC7C,QAAf,CAAwB,QAAxB,EAnBJ,CAqBI;;QACA,KAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG8B,IAAI,CAACzC,MAAzB,EAAiCW,CAAC,EAAlC,EACA;UAEI;UACA,IAAIwC,UAAU,GAAG,EAAjB;UAAA,IACIC,WAAW,GAAG,EADlB;;UAGA,IAAIzC,CAAC,KAAG,CAAR,EACA;YACIwC,UAAU,GAAG,MAAb;UACH,CAHD,MAKA;YACIC,WAAW,GAAG,SAAd;UACH,CAbL,CAeI;;;UACA,IAAIX,IAAI,CAACzC,MAAL,GAAc,CAAlB,EACA;YACI,IAAIqD,MAAM,GAAGtG,CAAC,CAAC,OAAD,CAAD,CAAWwD,QAAX,CAAoBwC,KAApB,CAAb;YAAA,IACIO,KAAK,GAAGvG,CAAC,CAAC,YAAU+F,gBAAV,GAA2B,GAA3B,GAA+BnC,CAA/B,GAAiC,cAAjC,GAAgDwC,UAAhD,GAA2D,IAA3D,GAAgEtF,KAAK,CAAC4C,CAAN,CAAQ,MAAR,EAAgBgC,IAAI,CAAC9B,CAAD,CAAJ,CAAQS,IAAxB,CAAhE,GAA8F,MAA/F,CAAD,CACHb,QADG,CACM8C,MADN,EAEH9D,IAFG,CAEE,oBAFF,EAEwB,MAAIuD,gBAAJ,GAAqB,QAArB,GAA8BnC,CAFtD,CADZ;UAIH,CAtBL,CAwBI;;;UACA,IAAI4C,KAAK,GAAGxG,CAAC,CAAC,cAAY+F,gBAAZ,GAA6B,QAA7B,GAAsCnC,CAAtC,GAAwC,WAAxC,GAAoDyC,WAApD,GAAgE,KAAjE,CAAD,CAAyE7C,QAAzE,CAAkFyC,cAAlF,CAAZ,CAzBJ,CA2BI;;UACA,IAAIQ,SAAS,GAAGzG,CAAC,CAAC8C,IAAF,CAAO8C,MAAP,EAAe,UAAS7C,CAAT,EAAW;YAAE,OAAOA,CAAC,CAAC2D,KAAF,KAAYhB,IAAI,CAAC9B,CAAD,CAAJ,CAAQ+C,EAA3B;UAAgC,CAA5D,CAAhB;;UACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,SAAS,CAACxD,MAA9B,EAAsC2D,CAAC,EAAvC,EACA;YACI;YACAT,OAAO,CAAC9E,IAAR,CAAa,MAAMwE,SAAN,GAAkB,UAAlB,GAA+BY,SAAS,CAACG,CAAD,CAAT,CAAaxC,MAA5C,GAAqD,QAAlE,EAA4EZ,QAA5E,CAAqFgD,KAArF;UACH,CAjCL,CAmCI;;;UACA,IAAIA,KAAK,CAACnF,IAAN,CAAW,mBAAX,EAAgC4B,MAAhC,GAAyC,CAAzC,IAA8CyC,IAAI,CAACzC,MAAL,GAAc,CAAhE,EAAmE;YAC/DsD,KAAK,CAACnD,QAAN,CAAe,OAAf;YACAmD,KAAK,CAACM,MAAN,CAAa,6BAAb;UACH;QAEJ,CAhEL,CAkEI;;;QACA,IAAInB,IAAI,CAACzC,MAAL,GAAc,CAAlB,EACA;UACI,KAAK2B,WAAL,CAAiBoB,KAAK,CAAC3E,IAAN,CAAW,GAAX,CAAjB,EAAkC,OAAlC,EAA2C,YAA3C;QACH,CAtEL,CAwEI;;;QACA8E,OAAO,CAACW,IAAR;QAEAb,cAAc,CAACc,QAAf,CAAwB;UAACC,OAAO,EAAE;QAAV,CAAxB,EAAsC,MAAtC,EAA8ChH,CAAC,CAACY,KAAF,CAAQ,YACtD;UACI;UACAE,KAAK,CAACmG,cAAN,CAAqBhB,cAArB;QACH,CAJ6C,EAI3C,IAJ2C,CAA9C;MAMH;IAEJ,CApYL;IAsYIiB,UAAU,EAAE,oBAASpF,EAAT,EACZ;MAEIA,EAAE,CAACqF,cAAH;MACArF,EAAE,CAACsF,eAAH;MAEA,IAAIC,IAAI,GAAGrH,CAAC,CAAC8B,EAAE,CAACC,MAAJ,CAAZ;MAAA,IACIuF,OAAO,GAAGD,IAAI,CAACE,MAAL,GAAcA,MAAd,CAAqB,aAArB,CADd;MAAA,IAEIC,cAAc,GAAGH,IAAI,CAAC7E,IAAL,CAAU,oBAAV,CAFrB;MAAA,IAGIiF,OAAO,GAAGzH,CAAC,CAACwH,cAAD,CAHf,CALJ,CAUI;;MACAF,OAAO,CAACjG,IAAR,CAAa,OAAb,EAAsB2D,WAAtB,CAAkC,KAAlC;MACAqC,IAAI,CAACjE,QAAL,CAAc,KAAd,EAZJ,CAcI;;MACAqE,OAAO,CAACC,QAAR,CAAiB,KAAjB,EAAwBtE,QAAxB,CAAiC,QAAjC;MACAqE,OAAO,CAACzC,WAAR,CAAoB,QAApB;IAEH,CAzZL;IA2ZIG,gBAAgB,EAAE,0BAASD,YAAT,EAAuBvC,iBAAvB,EAA0ClB,YAA1C,EAClB;MACItB,OAAO,CAACwH,qBAAR,CAA8B3H,CAAC,CAACY,KAAF,CAAQ,YACtC;QACI;QACA,IAAIgH,iBAAiB,GAAG1C,YAAY,CAAC1C,IAAb,CAAkB,SAAlB,KAAgC,KAAxD,CAFJ,CAII;;QACA,IAAI,CAACoF,iBAAL,EACA;UACI,KAAKzC,gBAAL,CAAsBD,YAAtB,EAAoCvC,iBAApC,EAAuDlB,YAAvD;UACA;QACH,CATL,CAWI;;;QACA,IAAIgB,iBAAiB,GAAG,KAAKC,mBAAL,CAAyBjB,YAAzB,CAAxB,CAZJ,CAcI;;;QACA,IAAIoG,KAAK,GAAGD,iBAAiB,CAAC5F,UAA9B;QACA6F,KAAK,CAACzE,QAAN,CAAe,qBAAf,EAhBJ,CAkBI;;QACAyE,KAAK,CAACxG,IAAN,CAAW,sBAAX,EAAmCyG,OAAnC,CAA2C,IAA3C,EAAiD1E,QAAjD,CAA0D,QAA1D,EAnBJ,CAqBI;;QACAyE,KAAK,CAACxG,IAAN,CAAW,IAAX,EAAiB2D,WAAjB,CAA6B,QAA7B,EAtBJ,CAwBI;;QACA,IAAI+C,OAAO,GAAGF,KAAK,CAACxG,IAAN,CAAW,sBAAX,EAAmCyG,OAAnC,CAA2C,IAA3C,EAAiDP,MAAjD,CAAwD,IAAxD,CAAd,CAzBJ,CA2BI;;QACA,KAAK,IAAI3D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,iBAAiB,CAACM,MAAtC,EAA8CW,CAAC,EAA/C,EACA;UACI,IAAIQ,MAAM,GAAGzB,iBAAiB,CAACiB,CAAD,CAAjB,CAAqBO,eAArB,CAAqCC,MAAlD,CADJ,CAGI;;UACA,IAAKyD,KAAK,CAACxG,IAAN,CAAW,0BAAwBsB,iBAAiB,CAACiB,CAAD,CAAjB,CAAqBC,SAA7C,GAAuD,IAAlE,EAAwEZ,MAAxE,KAAmF,CAAxF,EACA;YACI,IAAI+E,qBAAqB,GAAGhI,CAAC,CAAC8C,IAAF,CAAO,KAAKrC,QAAL,CAAcuH,qBAArB,EAA4C,UAASC,CAAT,EAAW;cAAE,OAAOA,CAAC,KAAKxF,iBAAb;YAAiC,CAA1F,CAA5B;;YACA,IAAIuF,qBAAqB,CAAC/E,MAA1B,EAAkC;cAC9B,IAAIiF,MAAM,GAAGlI,CAAC,CAAC,mDAAiD2C,iBAAiB,CAACiB,CAAD,CAAjB,CAAqBC,SAAtE,GAAgF,MAAjF,CAAd;;cACA,IAAID,CAAC,KAAG,CAAR,EACA;gBACI5D,CAAC,CAAC,OAAD,CAAD,CAAWmI,YAAX,CAAwBJ,OAAxB;cACH;;cAED,IAAIK,aAAa,GAAGpI,CAAC,CAAC,4BAA4Bc,KAAK,CAAC4C,CAAN,CAAQ,MAAR,EAAgBf,iBAAiB,CAACiB,CAAD,CAAjB,CAAqBC,SAArC,CAA5B,GAA8E,MAA/E,CAArB;cACAuE,aAAa,CAACD,YAAd,CAA2BJ,OAA3B;cAEAG,MAAM,CAACC,YAAP,CAAoBJ,OAApB;cAEA,KAAKnD,WAAL,CAAiBwD,aAAjB,EAAgC,OAAhC,EAAyC,UAASC,KAAT,EAAgB;gBACrD,IAAIC,QAAQ,GAAGtI,CAAC,CAACqI,KAAK,CAACE,aAAP,CAAhB;gBAAA,IACId,OAAO,GAAGa,QAAQ,CAACE,IAAT,CAAc,IAAd,CADd;;gBAGA,IAAIf,OAAO,CAACgB,QAAR,CAAiB,QAAjB,CAAJ,EAAgC;kBAC5BhB,OAAO,CAACzC,WAAR,CAAoB,QAApB;kBACAsD,QAAQ,CAAClF,QAAT,CAAkB,UAAlB;gBACH,CAHD,MAGO;kBACHqE,OAAO,CAACrE,QAAR,CAAiB,QAAjB;kBACAkF,QAAQ,CAACtD,WAAT,CAAqB,UAArB;gBACH;cACJ,CAXD;YAYH,CAxBD,MAwBO;cACH,IAAIkD,MAAM,GAAGlI,CAAC,CAAC,4CAA0C2C,iBAAiB,CAACiB,CAAD,CAAjB,CAAqBC,SAA/D,GAAyE,MAA1E,CAAd;;cACA,IAAID,CAAC,KAAG,CAAR,EACA;gBACI5D,CAAC,CAAC,OAAD,CAAD,CAAWmI,YAAX,CAAwBJ,OAAxB;cACH;;cACD/H,CAAC,CAAC,SAASc,KAAK,CAAC4C,CAAN,CAAQ,MAAR,EAAgBf,iBAAiB,CAACiB,CAAD,CAAjB,CAAqBC,SAArC,CAAT,GAA2D,OAA5D,CAAD,CAAsEsE,YAAtE,CAAmFJ,OAAnF;cACAG,MAAM,CAACC,YAAP,CAAoBJ,OAApB;YACH;UAEJ,CAzCL,CA2CI;;;UACA,IAAI7D,GAAG,GAAG2D,KAAK,CAACxG,IAAN,CAAW,kBAAgB+C,MAAhB,GAAuB,IAAlC,EAAwC0D,OAAxC,CAAgD,IAAhD,CAAV;UAEAI,MAAM,CAACrB,MAAP,CAAc3C,GAAd;UACAA,GAAG,CAACc,WAAJ,CAAgB,QAAhB;QACH;MAEJ,CAhF6B,EAgF3B,IAhF2B,CAA9B;IAiFH,CA9eL;;IAgfI;AACZ;AACA;IACYtC,mBAAmB,EAAE,6BAASjB,YAAT,EACrB;MACI;MACA,IAAIgB,iBAAiB,GAAG,EAAxB,CAFJ,CAII;;MACA,IAAIiG,aAAa,GAAGjH,YAAY,CAACkH,YAAb,CAA0B,QAA1B,EAAoCpB,MAApC,GAA6CzB,IAA7C,CAAkD,IAAlD,CAApB,CALJ,CAOI;;MACA,IAAI8C,KAAK,GAAGF,aAAa,CAACG,KAAd,CAAoB,GAApB,CAAZ,CARJ,CAUI;;MACA,QAAQD,KAAK,CAAC3F,MAAd;QAEI,KAAK,CAAL;UACI;UACAR,iBAAiB,GAAGmG,KAAK,CAAC,CAAD,CAAL,GAAW,GAAX,GAAiBA,KAAK,CAAC,CAAD,CAAtB,GAA4B,GAA5B,GAAkCA,KAAK,CAAC,CAAD,CAA3D;UACA;;QAEJ,KAAK,CAAL;UACI;UACAnG,iBAAiB,GAAGmG,KAAK,CAAC,CAAD,CAAL,GAAW,GAAX,GAAiBA,KAAK,CAAC,CAAD,CAA1C;UACA;;QAEJ,KAAK,CAAL;UACI;UACAnG,iBAAiB,GAAGmG,KAAK,CAAC,CAAD,CAAzB;UACA;MAfR,CAXJ,CA8BI;;;MACA,IAAI,CAACnG,iBAAL,EAAwB;QACpB,OAAO,KAAP;MACH,CAjCL,CAmCI;;;MACA,OAAOA,iBAAP;IACH,CAzhBL;;IA2hBI;AACZ;AACA;IACY4C,yBAAyB,EAAE,mCAASJ,YAAT,EAC3B;MACI,IAAI6D,eAAe,GAAG7D,YAAY,CAACzC,IAAb,CAAkB,MAAlB,CAAtB;;MAEA,IAAK,OAAOsG,eAAP,IAA0B,QAA/B,EACA;QACI,OAAOA,eAAP;MACH,CAHD,MAKA;QACI,OAAO,KAAP;MACH;IACJ;EA1iBL,CADqB,EA8iBrB;IACInI,QAAQ,EAAE;MACNiC,UAAU,EAAE,IADN;MAENC,OAAO,EAAE,KAFH;MAGN1B,SAAS,EAAE,KAHL;MAIN6G,qBAAqB,EAAE;IAJjB;EADd,CA9iBqB,CAAzB;AAujBH,CAvkBD,EAukBGe,MAvkBH,E","sources":["webpack:///./src/FieldManipulator.js"],"sourcesContent":["/**\n * Spoon plugin for Craft CMS\n *\n * @copyright Copyright (c) 2018, 2022 Double Secret Agency\n * @link      https://plugins.doublesecretagency.com/\n * @package   Spoon\n * @since     3.0.0\n */\n(function($){\n\n\n    if (typeof Spoon == 'undefined')\n    {\n        Spoon = {};\n    }\n\n    // noinspection JSVoidFunctionReturnValueUsed\n    /**\n     * Overrides the default Matrix ‘add block’ buttons with our grouped ones\n     * and keeps them up to date based on the current context.\n     *\n     * Also adds any field layouts that may exist for each block type\n     * in the current context.\n     */\n    Spoon.FieldManipulator = Garnish.Base.extend(\n        {\n\n            _handleMatrixInputInitProxy: null,\n            _handleMatrixInputBlockAddedProxy: null,\n\n            init: function(settings)\n            {\n                // Set up\n                this.setSettings(settings, Spoon.FieldManipulator.defaults);\n\n                // // Work out if we’re in the 'entrytype' context, so we can keep things up to date\n                // if (this.settings.context.split(':')[0] === 'entrytype')\n                // {\n                //     // Listen to entry type switch\n                //     Garnish.on(Craft.EntryTypeSwitcher, 'beforeTypeChange', $.proxy(function(ev)\n                //     {\n                //         this.settings.context = 'entrytype:' + ev.target.$typeSelect.val();\n                //     }, this));\n                // }\n\n                this._handleMatrixInputInitProxy = $.proxy(this, 'handleMatrixInputInit');\n                this._handleMatrixInputBlockAddedProxy = $.proxy(this, 'handleMatrixInputBlockAdded');\n\n                Garnish.on(Craft.MatrixInput, 'afterInit', this._handleMatrixInputInitProxy);\n                Garnish.on(Craft.MatrixInput, 'blockAdded', this._handleMatrixInputBlockAddedProxy);\n\n                if (typeof Craft.SuperTable !== \"undefined\") {\n                    if (typeof Craft.SuperTable.Input !== \"undefined\") {\n                        Garnish.on(Craft.SuperTable.Input, 'afterInit', this._handleMatrixInputInitProxy);\n                        Garnish.on(Craft.SuperTable.Input, 'blockAdded', this._handleMatrixInputBlockAddedProxy);\n                    } else if (typeof Craft.SuperTable.MatrixInputAlt !== \"undefined\") {\n                        Garnish.on(Craft.SuperTable.MatrixInputAlt, 'afterInit', this._handleMatrixInputInitProxy);\n                        Garnish.on(Craft.SuperTable.MatrixInputAlt, 'blockAdded', this._handleMatrixInputBlockAddedProxy);\n                    }\n                }\n\n                // If we are versioned we need to scrape the page as no events will fire\n                if (this.settings.versioned) {\n                    Garnish.$doc.find('.matrix-field').each($.proxy(function(idx, matrixField)\n                    {\n                        var $matrixField = $(matrixField);\n\n                        // sort out the button groups\n                        this.initBlockTypeGroups($matrixField);\n\n                        // initialize the blocks\n                        $matrixField.find('> .blocks > .matrixblock').each($.proxy(function(idx, matrixBlock)\n                        {\n                            this.initBlocks($(matrixBlock), $matrixField);\n                        }, this));\n\n                    }, this));\n                }\n            },\n\n\n            handleMatrixInputInit: function(ev)\n            {\n                var $matrixField = ev.target.$container,\n                    $blocks = ev.target.$blockContainer.children();\n\n                this.initBlockTypeGroups($matrixField);\n\n                $blocks.each($.proxy(function(key,block)\n                {\n                    this.initBlocks($(block), $matrixField);\n                }, this));\n            },\n\n            handleMatrixInputBlockAdded: function(ev)\n            {\n                var $matrixField = ev.target.$container,\n                    $block = $(ev.$block);\n\n                this.initBlocks($block, $matrixField);\n            },\n\n            initBlockTypeGroups: function($matrixField)\n            {\n                // If the field has already been spooned, bail\n                if ($matrixField.data('spooned')) {\n                    return;\n                }\n\n                // get matrix field handle out of the dom\n                var matrixFieldHandle = this._getMatrixFieldName($matrixField);\n\n                // Filter by the current matrix field\n                var spoonedBlockTypes = [];\n\n                // Check current context first\n                if (typeof this.settings.blockTypes[this.settings.context] !== \"undefined\")\n                {\n                    spoonedBlockTypes = $.grep(this.settings.blockTypes[this.settings.context], function(e){\n                        return e.fieldHandle === matrixFieldHandle;\n                    });\n                }\n\n                // Check global context\n                if (spoonedBlockTypes.length < 1 && typeof this.settings.blockTypes['global'] !== \"undefined\")\n                {\n                    spoonedBlockTypes = $.grep(this.settings.blockTypes['global'], function(e){\n                        return e.fieldHandle === matrixFieldHandle;\n                    });\n                }\n\n                // If no config, bail\n                if (spoonedBlockTypes.length < 1) {\n                    return;\n                }\n\n                // add some data to tell us we’re spooned\n                $matrixField.data('spooned', true);\n\n                // store the data for when we loop the blocks themselves, so we don’t have to run all this again\n                $matrixField.data('spoon-block-types', spoonedBlockTypes);\n\n                // If versioned, bail\n                if (this.settings.versioned) {\n                    return;\n                }\n\n                // find the original buttons\n                var $origButtons = $matrixField.find('> .buttons').first();\n\n                // hide the original ones and start the button spooning process\n                $origButtons.addClass('hidden');\n\n                // make our own container, not using .buttons as it gets event bindings\n                // from MatrixInput.js that we really don't want\n                var $spoonedButtonsContainer = $('<div class=\"buttons-spooned\" />').insertAfter($origButtons);\n\n                // the main button group\n                var $mainButtons = $('<div class=\"btngroup\" />').appendTo($spoonedButtonsContainer);\n\n                // the secondary one, used when the container gets too small\n                var $secondaryButtons = $('<div class=\"btn add icon menubtn hidden\">' + Craft.t('app', 'Add a block') + '</div>').appendTo($spoonedButtonsContainer),\n                    $secondaryMenu = $('<div class=\"menu spoon-secondary-menu\" />').appendTo($spoonedButtonsContainer);\n\n                // loop each block type config\n                for (var i = 0; i < spoonedBlockTypes.length; i++) {\n\n                    // check if group exists, add if not\n                    if ($mainButtons.find('[data-spooned-group=\"' + spoonedBlockTypes[i].groupName + '\"]').length === 0) {\n                        // main buttons\n                        var $mainMenuBtn = $('<div class=\"btn  menubtn\">' + Craft.t('site', spoonedBlockTypes[i]['groupName']) + '</div>').appendTo($mainButtons),\n                            $mainMenu = $('<div class=\"menu\" data-spooned-group=\"' + spoonedBlockTypes[i]['groupName'] + '\" />').appendTo($mainButtons),\n                            $mainUl = $('<ul />').appendTo($mainMenu);\n\n                        // single group buttons\n                        if (i !== 0) {\n                            $('<hr>').appendTo($secondaryMenu);\n                        }\n                        $('<h6>' + Craft.t('site', spoonedBlockTypes[i]['groupName']) + '</h6>').appendTo($secondaryMenu);\n                        var $secondaryUl = $('<ul/>').appendTo($secondaryMenu);\n                    }\n\n                    // make a link\n                    $li = $('<li><a data-type=\"' + spoonedBlockTypes[i].matrixBlockType.handle + '\">' + Craft.t('site', spoonedBlockTypes[i].matrixBlockType.name) + '</a></li>');\n\n                    // add it to the main list\n                    $li.appendTo($mainUl);\n\n                    // add a copy to the secondary one as well\n                    $li.clone().appendTo($secondaryUl);\n\n                }\n\n                // make the MenuBtns work\n                $mainButtons.find('.menubtn').each(function() {\n\n                    new Garnish.MenuBtn($(this),\n                        {\n                            onOptionSelect: function(option) {\n                                // find our type and click the correct original btn!\n                                var type = $(option).data('type');\n                                $origButtons.find('[data-type=\"' + type + '\"]').trigger('click');\n                            }\n                        });\n\n                });\n\n                new Garnish.MenuBtn($secondaryButtons,\n                    {\n                        onOptionSelect: function(option) {\n                            // find our type and click the correct original btn!\n                            var type = $(option).data('type');\n                            $origButtons.find('[data-type=\"' + type + '\"]').trigger('click');\n                        }\n                    });\n\n                // Bind a resize to the $matrixField so we can work out which groups UI to show\n                this.addListener($matrixField, 'resize', $.proxy(function() {\n                    // Do we know what the button group width is yet?\n                    if (!$matrixField.data('spoon-main-buttons-width')) {\n                        $matrixField.data('spoon-main-buttons-width', $mainButtons.width());\n\n                        if (!$matrixField.data('spoon-main-buttons-width')) {\n                            return;\n                        }\n                    }\n\n                    // Check the widths and do the hide/show\n                    var fieldWidth = $matrixField.width(),\n                        mainButtonsWidth = $matrixField.data('spoon-main-buttons-width');\n                    if (fieldWidth < mainButtonsWidth) {\n                        $secondaryButtons.removeClass('hidden');\n                        $mainButtons.addClass('hidden');\n                    } else {\n                        $secondaryButtons.addClass('hidden');\n                        $mainButtons.removeClass('hidden');\n                    }\n\n                }, this));\n            },\n\n            initBlocks: function($matrixBlock, $matrixField)\n            {\n\n                if ( !$matrixBlock.data('spooned') )\n                {\n\n                    // Set this so we don’t re-run this\n                    $matrixBlock.data('spooned', true);\n\n                    // Get the cached spooned block types data for this whole field\n                    var spoonedBlockTypes = $matrixField.data('spoon-block-types');\n\n                    // Check we have some config\n                    if ( typeof spoonedBlockTypes !== \"undefined\" && spoonedBlockTypes.length >= 1 )\n                    {\n\n                        // First, sort out the settings menu\n                        if (!this.settings.versioned) {\n                            var $settingsBtn = $matrixBlock.find('.actions .settings.menubtn');\n                            this.initSettingsMenu($settingsBtn, spoonedBlockTypes, $matrixField);\n                        }\n\n                        // Second, get the current block’s type out of the dom, so we can do the field layout\n                        var matrixBlockTypeHandle = this._getMatrixBlockTypeHandle($matrixBlock);\n\n                        // Further filter our spoonedBlockTypes array by the current block’s type\n                        var spoonedBlockType = $.grep(spoonedBlockTypes, function(e){ return e.matrixBlockType.handle === matrixBlockTypeHandle; });\n\n                        // Initialize the field layout on the block\n                        if ( spoonedBlockType.length === 1 && spoonedBlockType[0].fieldLayoutId !== null )\n                        {\n                            $matrixBlock.data('spooned-block-type', spoonedBlockType[0]);\n                            this.initBlockFieldLayout($matrixBlock, $matrixField);\n                        }\n                        // If that failed, do another check against the global context\n                        else if (this.settings.blockTypes.hasOwnProperty('global'))\n                        {\n                            var matrixFieldHandle = this._getMatrixFieldName($matrixField);\n                            spoonedBlockTypes = $.grep(this.settings.blockTypes['global'], function(e){ return e.fieldHandle === matrixFieldHandle; });\n\n                            if ( spoonedBlockTypes.length >= 1 )\n                            {\n                                spoonedBlockType = $.grep(spoonedBlockTypes, function(e){ return e.matrixBlockType.handle === matrixBlockTypeHandle; });\n\n                                if ( spoonedBlockType.length === 1 && spoonedBlockType[0].fieldLayoutId !== null )\n                                {\n                                    $matrixBlock.data('spooned-block-type', spoonedBlockType[0]);\n                                    this.initBlockFieldLayout($matrixBlock, $matrixField);\n                                }\n                                else\n                                {\n                                    $matrixBlock.addClass('matrixblock-not-spooned');\n                                }\n                            }\n                            else\n                            {\n                                $matrixBlock.addClass('matrixblock-not-spooned');\n                            }\n                        }\n                        else\n                        {\n                            $matrixBlock.addClass('matrixblock-not-spooned');\n                        }\n\n                    }\n                    else\n                    {\n                        $matrixBlock.addClass('matrixblock-not-spooned');\n                    }\n\n                }\n                else\n                {\n                    // Fixes Redactor\n                    Garnish.$doc.trigger('scroll');\n                }\n\n            },\n\n            initBlockFieldLayout: function($matrixBlock, $matrixField)\n            {\n\n                var spoonedBlockType = $matrixBlock.data('spooned-block-type'),\n                    tabs = spoonedBlockType.fieldLayoutModel.tabs,\n                    fields = spoonedBlockType.fieldLayoutModel.fields;\n\n                // Check we have some tabs\n                // TODO: would be nice to not show the tab nav if there is only one tab\n                if ( tabs.length >= 1 )\n                {\n                    // Add a class so we can style\n                    $matrixBlock.addClass('matrixblock-spooned');\n\n                    if (this.settings.versioned) {\n                        $matrixBlock.addClass('matrixblock-spooned--disabled');\n                    }\n\n                    // Get a namespaced id\n                    var namespace = $matrixField.prop('id') + '-blocks-' + $matrixBlock.data('id'),\n                        spoonedNamespace = 'spoon-' + namespace;\n\n                    // Add the tabs container\n                    var $tabs = $('<ul class=\"spoon-tabs\"/>').appendTo($matrixBlock);\n\n                    // Make our own fields container and hide the native one, but keep its height\n                    var $spoonedFields = $('<div class=\"spoon-fields\"/>').css({ 'opacity' : 0 }).appendTo($matrixBlock),\n                        $fields = $matrixBlock.find('> .fields');\n                    $fields.css({ 'opacity' : 0 });\n                    $spoonedFields.addClass('fields');\n\n                    // Loop the tabs\n                    for (var i = 0; i < tabs.length; i++)\n                    {\n\n                        // Set up the first one to be active\n                        var navClasses = '',\n                            paneClasses = '';\n\n                        if (i===0)\n                        {\n                            navClasses = ' sel';\n                        }\n                        else\n                        {\n                            paneClasses = ' hidden';\n                        }\n\n                        // Add the tab nav, if there is more than one\n                        if (tabs.length > 1)\n                        {\n                            var $tabLi = $('<li/>').appendTo($tabs),\n                                $tabA = $('<a id=\"'+spoonedNamespace+'-'+i+'\" class=\"tab'+navClasses+'\">'+Craft.t('site', tabs[i].name)+'</a>')\n                                    .appendTo($tabLi)\n                                    .data('spooned-tab-target', '#'+spoonedNamespace+'-pane-'+i);\n                        }\n\n                        // Make a tab pane\n                        var $pane = $('<div id=\"'+spoonedNamespace+'-pane-'+i+'\" class=\"'+paneClasses+'\"/>').appendTo($spoonedFields);\n\n                        // Filter the fields array by their associated tabId and loop over them\n                        var tabFields = $.grep(fields, function(e){ return e.tabId === tabs[i].id; });\n                        for (var n = 0; n < tabFields.length; n++)\n                        {\n                            // Move the required field to our new container\n                            $fields.find('#' + namespace + '-fields-' + tabFields[n].handle + '-field').appendTo($pane);\n                        }\n\n                        // Now check for errors and update the tab if needed\n                        if ($pane.find('.field.has-errors').length > 0 && tabs.length > 1) {\n                            $tabA.addClass('error');\n                            $tabA.append(' <span data-icon=\"alert\" />');\n                        }\n\n                    }\n\n                    // Bind events to tab nav clicks\n                    if (tabs.length > 1)\n                    {\n                        this.addListener($tabs.find('a'), 'click', 'onTabClick');\n                    }\n\n                    // Force the fields to be removed from the layout\n                    $fields.hide();\n\n                    $spoonedFields.velocity({opacity: 1}, 'fast', $.proxy(function()\n                    {\n                        // Re-initialize the Craft UI\n                        Craft.initUiElements($spoonedFields);\n                    }, this));\n\n                }\n\n            },\n\n            onTabClick: function(ev)\n            {\n\n                ev.preventDefault();\n                ev.stopPropagation();\n\n                var $tab = $(ev.target),\n                    $tabNav = $tab.parent().parent('.spoon-tabs'),\n                    targetSelector = $tab.data('spooned-tab-target'),\n                    $target = $(targetSelector);\n\n                // Toggle tab nav state\n                $tabNav.find('a.sel').removeClass('sel');\n                $tab.addClass('sel');\n\n                // Toggle the pane state\n                $target.siblings('div').addClass('hidden');\n                $target.removeClass('hidden');\n\n            },\n\n            initSettingsMenu: function($settingsBtn, spoonedBlockTypes, $matrixField)\n            {\n                Garnish.requestAnimationFrame($.proxy(function()\n                {\n                    // Get the Garnish.MenuBtn object\n                    var disclosureMenuBtn = $settingsBtn.data('trigger') || false;\n\n                    // If there wasn’t one then fail and try again\n                    if (!disclosureMenuBtn)\n                    {\n                        this.initSettingsMenu($settingsBtn, spoonedBlockTypes, $matrixField);\n                        return;\n                    }\n\n                    // Get the field handle\n                    var matrixFieldHandle = this._getMatrixFieldName($matrixField);\n\n                    // Get the actual menu out of it once we get this far\n                    var $menu = disclosureMenuBtn.$container;\n                    $menu.addClass('spoon-settings-menu');\n\n                    // Hide all the li’s with add block links in them\n                    $menu.find('a[data-action=\"add\"]').parents('li').addClass('hidden');\n\n                    // Remove all the padded classes on hr’s\n                    $menu.find('hr').removeClass('padded');\n\n                    // Get the correct ul to play with in the menu container\n                    var $origUl = $menu.find('a[data-action=\"add\"]').parents('li').parent('ul');\n\n                    // Loop the given block type data and adjust the menu to match the groups\n                    for (var i = 0; i < spoonedBlockTypes.length; i++)\n                    {\n                        var handle = spoonedBlockTypes[i].matrixBlockType.handle;\n\n                        // Make a new group ul if needed\n                        if ( $menu.find('[data-spooned-group=\"'+spoonedBlockTypes[i].groupName+'\"]').length === 0 )\n                        {\n                            var nestedSettingsHandles = $.grep(this.settings.nestedSettingsHandles, function(a){ return a === matrixFieldHandle; });\n                            if (nestedSettingsHandles.length) {\n                                var $newUl = $('<ul class=\"padded hidden\" data-spooned-group=\"'+spoonedBlockTypes[i].groupName+'\" />');\n                                if (i!==0)\n                                {\n                                    $('<hr/>').insertBefore($origUl);\n                                }\n\n                                var $groupHeading = $('<a class=\"fieldtoggle\">' + Craft.t('site', spoonedBlockTypes[i].groupName) + '</a>');\n                                $groupHeading.insertBefore($origUl);\n\n                                $newUl.insertBefore($origUl);\n\n                                this.addListener($groupHeading, 'click', function(event) {\n                                    var $trigger = $(event.currentTarget),\n                                        $target = $trigger.next('ul');\n\n                                    if ($target.hasClass('hidden')) {\n                                        $target.removeClass('hidden');\n                                        $trigger.addClass('expanded');\n                                    } else {\n                                        $target.addClass('hidden');\n                                        $trigger.removeClass('expanded');\n                                    }\n                                });\n                            } else {\n                                var $newUl = $('<ul class=\"padded\" data-spooned-group=\"'+spoonedBlockTypes[i].groupName+'\" />');\n                                if (i!==0)\n                                {\n                                    $('<hr/>').insertBefore($origUl);\n                                }\n                                $('<h6>' + Craft.t('site', spoonedBlockTypes[i].groupName) + '</h6>').insertBefore($origUl);\n                                $newUl.insertBefore($origUl);\n                            }\n\n                        }\n\n                        // Add the li\n                        var $li = $menu.find('a[data-type=\"'+handle+'\"]').parents('li');\n\n                        $newUl.append($li);\n                        $li.removeClass('hidden');\n                    }\n\n                }, this));\n            },\n\n            /**\n             * This simply returns a fieldHandle if it can get one or false if not\n             */\n            _getMatrixFieldName: function($matrixField)\n            {\n                // Initialize handle\n                var matrixFieldHandle = '';\n\n                // Get the Matrix field ID\n                var matrixFieldId = $matrixField.parentsUntil('.field').parent().prop('id');\n\n                // Split ID into separate parts\n                var parts = matrixFieldId.split(\"-\");\n\n                // Configure handle based on number of parts\n                switch (parts.length) {\n\n                    case 9:\n                        // Matrix inside Something (e.g. Super Table) inside Matrix\n                        matrixFieldHandle = parts[1] + '-' + parts[4] + '-' + parts[7];\n                        break;\n\n                    case 7:\n                        // Matrix inside Something (e.g. Super Table)\n                        matrixFieldHandle = parts[1] + '-' + parts[5];\n                        break;\n\n                    case 3:\n                        // Normal Matrix\n                        matrixFieldHandle = parts[1];\n                        break;\n\n                }\n\n                // If no handle, bail\n                if (!matrixFieldHandle) {\n                    return false;\n                }\n\n                // Return the Matrix field handle\n                return matrixFieldHandle;\n            },\n\n            /**\n             * Returns the block type handle for a given $matrixBlock\n             */\n            _getMatrixBlockTypeHandle: function($matrixBlock)\n            {\n                var blockTypeHandle = $matrixBlock.data('type');\n\n                if ( typeof blockTypeHandle == 'string' )\n                {\n                    return blockTypeHandle;\n                }\n                else\n                {\n                    return false;\n                }\n            }\n\n        },\n        {\n            defaults: {\n                blockTypes: null,\n                context: false,\n                versioned: false,\n                nestedSettingsHandles: []\n            }\n        });\n\n})(jQuery);\n"],"names":["$","Spoon","FieldManipulator","Garnish","Base","extend","_handleMatrixInputInitProxy","_handleMatrixInputBlockAddedProxy","init","settings","setSettings","defaults","proxy","on","Craft","MatrixInput","SuperTable","Input","MatrixInputAlt","versioned","$doc","find","each","idx","matrixField","$matrixField","initBlockTypeGroups","matrixBlock","initBlocks","handleMatrixInputInit","ev","target","$container","$blocks","$blockContainer","children","key","block","handleMatrixInputBlockAdded","$block","data","matrixFieldHandle","_getMatrixFieldName","spoonedBlockTypes","blockTypes","context","grep","e","fieldHandle","length","$origButtons","first","addClass","$spoonedButtonsContainer","insertAfter","$mainButtons","appendTo","$secondaryButtons","t","$secondaryMenu","i","groupName","$mainMenuBtn","$mainMenu","$mainUl","$secondaryUl","$li","matrixBlockType","handle","name","clone","MenuBtn","onOptionSelect","option","type","trigger","addListener","width","fieldWidth","mainButtonsWidth","removeClass","$matrixBlock","$settingsBtn","initSettingsMenu","matrixBlockTypeHandle","_getMatrixBlockTypeHandle","spoonedBlockType","fieldLayoutId","initBlockFieldLayout","hasOwnProperty","tabs","fieldLayoutModel","fields","namespace","prop","spoonedNamespace","$tabs","$spoonedFields","css","$fields","navClasses","paneClasses","$tabLi","$tabA","$pane","tabFields","tabId","id","n","append","hide","velocity","opacity","initUiElements","onTabClick","preventDefault","stopPropagation","$tab","$tabNav","parent","targetSelector","$target","siblings","requestAnimationFrame","disclosureMenuBtn","$menu","parents","$origUl","nestedSettingsHandles","a","$newUl","insertBefore","$groupHeading","event","$trigger","currentTarget","next","hasClass","matrixFieldId","parentsUntil","parts","split","blockTypeHandle","jQuery"],"sourceRoot":""}